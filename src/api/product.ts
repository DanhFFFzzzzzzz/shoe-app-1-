import { supabase } from '../lib/supabase';
import { ProductWithSizes } from '../types/database.types';

// L·∫•y API_BASE t·ª´ bi·∫øn m√¥i tr∆∞·ªùng, fallback v·ªÅ IP c·ª©ng n·∫øu kh√¥ng c√≥
const API_BASE = process.env.NEXT_PUBLIC_RECOMMENDATION_API || "http://192.168.1.5:5555/api";

export const productApi = {
  // L·∫•y th√¥ng tin chi ti·∫øt c·ªßa m·ªôt s·∫£n ph·∫©m d·ª±a tr√™n slug
  getProductBySlug: async (slug: string): Promise<ProductWithSizes> => {
    const { data, error } = await supabase
      .from('product')
      .select('*')
      .eq('slug', slug)
      .single();

    if (error) throw error;

    const { data: sizes, error: sizeError } = await supabase
      .from('product_size')
      .select('size, quantity')
      .eq('product', data.id);

    if (sizeError) throw sizeError;

    return { ...data, sizes: sizes || [] };
  },

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (gi·∫£m s·ªë l∆∞·ª£ng t·ªìn kho)
  updateProductQuantity: async (productId: number, size: number, quantity: number) => {
    const { error } = await supabase.rpc('decrement_product_quantity', {
      p_product_id: productId,
      p_size: size,
      p_quantity: quantity
    });

    if (error) throw error;
  },

  // L·∫•y s·ªë l∆∞·ª£ng t·ªìn kho
  getProductQuantity: async (productId: number) => {
    const { data, error } = await supabase
      .from('product_size')
      .select('size, quantity')
      .eq('product', productId);

    if (error) throw error;
    return data;
  },

  // TƒÉng l·∫°i s·ªë l∆∞·ª£ng (th√™m s·∫£n ph·∫©m v√†o kho)
  incrementProductQuantity: async (productId: number, size: number, quantity: number) => {
    const { error } = await supabase.rpc('increment_product_quantity', {
      p_product_id: productId,
      p_size: size,
      p_quantity: quantity
    });
    if (error) throw error;
  },

  // ‚úÖ G·ª£i √Ω s·∫£n ph·∫©m  d·ª±a tr√™n n·ªôi dung (d√πng bi·∫øn m√¥i tr∆∞·ªùng cho IP)
  getProductRecommendations: async (productId: number) => {
    try {
      console.log('G·ªçi g·ª£i √Ω v·ªõi productId:', productId);
      if (!API_BASE) {
        console.error('‚ùå Bi·∫øn m√¥i tr∆∞·ªùng NEXT_PUBLIC_RECOMMENDATION_API ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!');
        return [];
      }
      const id = Number(productId);
      if (isNaN(id)) {
        console.error('‚ùå productId kh√¥ng ph·∫£i l√† s·ªë:', productId);
        return [];
      }
      const url = `${API_BASE}/content-based?id=${id}`;
      console.log('üåê G·ªçi API:', url);
      const response = await fetch(url);
      console.log('üì° Response status:', response.status);
      const data = await response.json();
      console.log('üì¶ D·ªØ li·ªáu tr·∫£ v·ªÅ:', data);
      if (data.error) {
        console.error('‚ùå L·ªói t·ª´ backend:', data.error);
        return [];
      }
      return data['goi_y_noi_dung'] || [];
    } catch (error) {
      console.error('Error fetching recommendations:', error);
      return [];
    }
  },

  // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
  getAllProducts: async () => {
    const { data, error } = await supabase.from('product').select('*');
    if (error) throw error;
    return data;
  },

  // C·∫≠p nh·∫≠t t·ªïng s·ªë l∆∞·ª£ng t·ªìn kho maxQuantity
  updateProductMaxQuantity: async (productId: number) => {
    const { data: sizes, error } = await supabase
      .from('product_size')
      .select('quantity')
      .eq('product', productId);

    if (error) throw error;

    const total = (sizes || []).reduce((sum, s) => sum + (s.quantity || 0), 0);

    const { error: updateError } = await supabase
      .from('product')
      .update({ maxQuantity: total })
      .eq('id', productId);

    if (updateError) throw updateError;
  },
// L·∫•y g·ª£i √Ω s·∫£n ph·∫©m d·ª±a tr√™n s·ªü th√≠ch ng∆∞·ªùi d√πng (collaborative filtering)
  getCollaborativeRecommendations: async (userId: string) => {
    try {
      console.log('G·ªçi g·ª£i √Ω collaborative v·ªõi userId:', userId);
      if (!API_BASE) {
        console.error('‚ùå Bi·∫øn m√¥i tr∆∞·ªùng NEXT_PUBLIC_RECOMMENDATION_API ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!');
        return [];
      }
      const url = `${API_BASE}/collaborative?user=${userId}`;
      console.log('üåê G·ªçi API:', url);
      const response = await fetch(url);
      console.log('üì° Response status:', response.status);
      const data = await response.json();
      console.log('üì¶ D·ªØ li·ªáu tr·∫£ v·ªÅ:', data);
      if (data.error) {
        console.error('‚ùå L·ªói t·ª´ backend:', data.error);
        return [];
      }
      return data['goi_y_cong_tac'] || [];
    } catch (error) {
      console.error('Error fetching collaborative recommendations:', error);
      return [];
    }
  }
};
